@page "/Products/Create"
@using EY.CoffeeManagement.App.Application.Dtos
@using EY.CoffeeManagement.App.Application.Dtos.BaseDtos
@using EY.CoffeeManagement.App.Application.Services.DomainServices.Contracts
@using EY.CoffeeManagement.BlazorUI.Extensions
@using Orientation = Radzen.Orientation
@using ButtonType = Radzen.ButtonType
@inject IProductCategoryService _productCategoryService
@inject IProductService _productService
@inject ToastService _toast
<EditForm Model="_model"
          OnValidSubmit="Save">
    <RadzenRow Gap="1rem">
        <RadzenColumn>
            <RadzenStack Orientation="Orientation.Vertical">
                <FluentValidationValidator DisableAssemblyScanning="true"/>
                <RadzenFormField Variant="Variant.Outlined"
                                 Text="Ürün Adı">
                    <RadzenTextBox Trim="true" @bind-Value="_model.Name"/>
                </RadzenFormField>
                <ValidationMessage role="alert" class="alert alert-danger" For="() => _model.Name"/>
                <RadzenFormField Text="Ürün Açıklaması">
                    <RadzenTextArea @bind-Value="_model.Description"/>
                </RadzenFormField>
                <RadzenFormField Variant="Variant.Outlined"
                                 Text="Ürün Fiyatı">

                    <RadzenNumeric @bind-Value="_model.Price" TValue="decimal" Min="0" Step="0.1" ShowUpDown="true"/>

                </RadzenFormField>
                <ValidationMessage role="alert" class="alert alert-danger" For="() => _model.Price"/>
                <RadzenFormField Text="Ürün Kategorisi">
                    <RadzenDropDown
                        TValue="ListProductCategoryDto"
                        Data="_productCategories"
                        Placeholder="Lütfen kategori seçiniz"
                        LoadData="LoadCategories"
                        TextProperty="@(nameof(ListProductCategoryDto.Name))"
                        ValueProperty="@(nameof(ListProductCategoryDto.id))"
                        Change="ProductCategoryChanged"
                        AllowFiltering="true"/>
                </RadzenFormField>
                <ValidationMessage role="alert" For="() => _model.ProductCategoryId" class="alert alert-danger"/>
                <RadzenFormField>
                    <RadzenButton Style="width: 100%" ButtonType="ButtonType.Submit" Text="Kaydet" Icon="save" Disabled="isProcessing"/>
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</EditForm>

@code {
    private bool isProcessing = false;
    private CreateProductDto _model = new();
    IEnumerable<ListProductCategoryDto> _productCategories = Enumerable.Empty<ListProductCategoryDto>();
    private Guid _selectedProductCategory;


    void ProductCategoryChanged(object productCategory)
    {
        Guid pCategory = (Guid)productCategory;
        _model.ProductCategoryId = pCategory;
    }

    private async Task LoadCategories()
    {
        isProcessing = true;
        var categories = await _productCategoryService.PaginateAsync<ListProductCategoryDto>(new PaginateRequest(1, int.MaxValue));

        if (categories.IsSuccess)
        {
            _productCategories = categories.Value.list;
        }

        isProcessing = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task Save()
    {
        if (isProcessing)
        {
            return;
        }

        isProcessing = true;
        StateHasChanged();


        var result = await _productService.CreateAsync(_model);
        if (result.IsSuccess)
        {
            _toast.Success();
        }
        else
        {
            _toast.Error();
        }

        _model.Name = "";
        _model.Description = "";
        _model.Price = 0;
        isProcessing = false;
        StateHasChanged();
    }

}