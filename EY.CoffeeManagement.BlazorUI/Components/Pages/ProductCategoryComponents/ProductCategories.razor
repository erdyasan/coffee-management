@page "/ProductCategories"
@using System.Globalization
@using EY.CoffeeManagement.App.Application.Dtos
@using EY.CoffeeManagement.App.Application.Dtos.BaseDtos
@using EY.CoffeeManagement.App.Application.Services.DomainServices.Contracts
@using EY.CustomResult
@inject IProductCategoryService _productCategoryService
@inject DialogService _dialog
<RadzenCard>

    <RadzenStack AlignItems="AlignItems.Start" class="p4">
        <RadzenButton Click="OpenCreateCanvas" Text="Yeni Ekle" ButtonStyle="ButtonStyle.Success">

        </RadzenButton>
        <RadzenDataGrid
            PageNumbersCount="3"
            AllowColumnResize="true"
            @ref="_grid"
            Count="totalCount"
            LoadData="LoadData"
            AllowPaging="true"
            PageSize="5"
            SelectionMode="DataGridSelectionMode.Single"
            PageSizeText="Satır"
            Culture="@(new CultureInfo("tr-tr"))"
            RowSelect="Select"
            Data="_productCategories"
            RowDeselect="DeSelect"
            PageSizeOptions="@( [5, 10, 15])"
            Responsive="true"
            AllowColumnPicking="true"
            TItem="ListProductCategoryDto">
            <Columns>
                <RadzenDataGridColumn Filterable="false" Title="Kategori Adı" Property="@(nameof(ListProductCategoryDto.Name))"></RadzenDataGridColumn>
                <RadzenDataGridColumn Width="fit-content" Title="Güncelle">
                    <Template Context="data">
                        <RadzenButton Text="Güncelle" ButtonStyle="ButtonStyle.Success" Click="@(async () => await OpenUpdateCanvas(data.id, data.Name))"></RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>

        </RadzenDataGrid>
    </RadzenStack>
</RadzenCard>

<Offcanvas
    OnHidden="async () => await _grid.RefreshDataAsync()"
    @ref="canvas"
    Placement="Placement.End"/>


@code {
    private Offcanvas canvas = default!;
    ListProductCategoryDto? selectedProductcategoryDto = null;
    RadzenDataGrid<ListProductCategoryDto> _grid;
    private List<ListProductCategoryDto> _selected = new();
    private int totalCount = 0;
    private bool isLoading = true;
    private IEnumerable<ListProductCategoryDto> _productCategories;

    private async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        StateHasChanged();
        var result = await _productCategoryService.PaginateAsync<ListProductCategoryDto>(PaginateRequest.FromSkip(args.Skip, args.Top));

        if (result.IsSuccess)
        {
            _productCategories = result.Value.list;
            totalCount = result.Value.totalCount;
            if (result.Value.list.Any())
            {
                _selected.Add(result.Value.list.First());
            }
        }

        StateHasChanged();
    }

    private void Select(ListProductCategoryDto selected)
    {
        selectedProductcategoryDto = selected;
        StateHasChanged();
    }

    private void DeSelect(ListProductCategoryDto deselected)
    {
        selectedProductcategoryDto = null;
        StateHasChanged();
    }


    private async Task OpenCreateCanvas()
    {
        await _dialog.OpenAsync<AddProductCategoryComponent>("Yeni Kategori Ekle", options: new DialogOptions
        {
            Draggable = true,
            ShowTitle = true,
            Resizable = true,
        });
        await _grid.RefreshDataAsync();
    }

    private async Task OpenUpdateCanvas(Guid itemId, string itemName)
    {
        await _dialog.OpenAsync<UpdateProductCategoryComponent>("Kategoriyi Güncelle", new Dictionary<string, object>
        {
            { nameof(UpdateProductCategoryComponent.ProductCategoryId), itemId },
            { nameof(UpdateProductCategoryComponent.ProductCategoryName), itemName }
        });
        await _grid.RefreshDataAsync();
    }


}